//
// Created by Andrea Bonvini on 23/04/21.
//

#ifndef POINTPROCESS_TESTDATA_H
#define POINTPROCESS_TESTDATA_H
#include <utility>
#include <vector>
#include <Eigen/Core>

#include "../../src/pointprocess/PointProcessDataset.h"
#include "../../src/pointprocess/InterEventDistributions.h"
#include "../../src/pointprocess/optimizers/BaseOptimizer.h"
#include "../../src/pointprocess/optimizers/GaussianOptimizer.h"
#include "../../src/pointprocess/optimizers/InverseGaussianOptimizer.h"
#include "../../src/pointprocess/optimizers/LogNormalOptimizer.h"


struct testData{
    Eigen::VectorXd testOptimalThetap;
    double testOptimalTheta0;
    double testOptimalKappa;
    std::vector<double> testEvents;
    testData(double a, double b, Eigen::VectorXd c, std::vector<double> d){
        testOptimalKappa = a;
        testOptimalTheta0 = b;
        testOptimalThetap = std::move(c);
        testEvents = std::move(d);
    }
};

struct EdaPhasicDataExample {
    std::vector<double> times = {
            6103.038,
            6147.786,
            6208.542,
            6235.540,
            6257.526,
            6276.576,
            6287.468,
            6337.930,
            6391.168,
            6460.256,
            6603.988,
            6674.760,
            6694.336,
            6803.594,
            6828.664,
            6874.020,
            6895.348,
            6922.310,
            7055.132,
            7060.382,
            7072.962,
            7076.812,
            7101.354,
            7105.398,
            7376.164,
            7403.652,
            7406.018,
            7410.758,
            7420.194,
            7425.126,
            7428.000,
            7447.470,
            7460.170,
            7511.564,
            7566.038,
            7579.414,
            7591.158,
            7593.334,
            7597.864,
            7600.612,
            7726.824,
            7740.094,
            7800.058,
            7993.330,
            8183.132,
            8241.708,
            8294.000,
            8300.214,
            8312.116,
            8345.180,
            8347.922,
            8432.002,
            8470.970,
            8491.568,
            8527.994,
            8579.614,
            8609.292,
            8644.230,
            8669.462,
            8683.856,
            8716.718,
            8758.196,
            8831.358,
            8949.574,
            8966.878,
            9056.018,
            9069.346,
            9138.322,
            9181.922,
            9201.698,
            9305.158,
            9308.280,
            9501.378,
            9584.604,
            9597.410,
            9656.556,
            9935.550,
            9960.912,
            10022.042,
            10034.948,
            10182.084,
            10295.580,
            10299.580,
            10303.270,
            10307.148,
            10309.944,
            10334.106,
            10338.824,
            10342.188,
            10350.766,
            10360.292,
            10366.778,
            10372.624,
            10383.902,
            10559.778,
            10563.490,
            10591.726,
            10691.288,
            10776.206,
            10779.062,
            10837.088,
            10843.624,
            10847.298,
            10865.280,
            10868.752,
            10871.540,
            10877.066,
            10885.650,
            10910.630,
            10917.674,
            10950.312,
            10957.510,
            11019.120,
            11028.864,
            11043.088,
            11053.202,
            11068.006,
            11076.944,
            11101.668,
            11115.070,
            11156.964,
            11206.750,
            11252.404,
            11254.672,
            11296.776,
            11308.348,
            11332.770,
            11344.346,
            11353.906,
            11417.564,
            11426.618,
            11435.562,
            11458.444,
            11494.538,
            11499.616,
            11502.756,
            11504.840,
            11511.128,
            11516.946,
            11526.258,
            11531.140,
            11536.102,
            11541.818,
            11548.132,
            11553.564
    };
    std::vector<double> amplitudes = {
            0.025,
            0.085,
            0.029,
            0.026,
            0.026,
            0.093,
            0.109,
            0.036,
            0.027,
            0.034,
            0.082,
            0.035,
            0.021,
            0.050,
            0.021,
            0.022,
            0.037,
            0.071,
            0.040,
            0.123,
            0.029,
            0.059,
            0.030,
            0.029,
            0.048,
            0.025,
            0.021,
            0.027,
            0.038,
            0.058,
            0.171,
            0.023,
            0.036,
            0.020,
            0.052,
            0.022,
            0.026,
            0.036,
            0.093,
            0.026,
            0.022,
            0.032,
            0.030,
            0.033,
            0.025,
            0.024,
            0.046,
            0.088,
            0.097,
            0.024,
            0.152,
            0.026,
            0.020,
            0.032,
            0.027,
            0.032,
            0.065,
            0.034,
            0.026,
            0.032,
            0.020,
            0.025,
            0.035,
            0.023,
            0.025,
            0.236,
            0.023,
            0.023,
            0.045,
            0.102,
            0.030,
            0.135,
            0.041,
            0.070,
            0.032,
            0.020,
            0.013,
            0.013,
            0.015,
            0.083,
            0.040,
            0.031,
            0.184,
            0.156,
            0.088,
            0.036,
            0.087,
            0.029,
            0.100,
            0.088,
            0.162,
            0.026,
            0.280,
            0.094,
            0.100,
            0.035,
            0.068,
            0.027,
            0.035,
            0.057,
            0.088,
            0.026,
            0.155,
            0.048,
            0.117,
            0.030,
            0.103,
            0.033,
            0.085,
            0.185,
            0.040,
            0.118,
            0.021,
            0.063,
            0.072,
            0.159,
            0.156,
            0.055,
            0.225,
            0.105,
            0.076,
            0.020,
            0.101,
            0.020,
            0.073,
            0.026,
            0.027,
            0.048,
            0.130,
            0.183,
            0.053,
            0.079,
            0.025,
            0.077,
            0.022,
            0.096,
            0.024,
            0.025,
            0.101,
            0.031,
            0.024,
            0.375,
            0.107,
            0.105,
            0.376
    };
};


static EdaPhasicDataExample get_phasicEDA_data(){
    return EdaPhasicDataExample();
}

static PointProcessDataset getTestDataset() {
    std::deque<double> events = {
            700.1410, 701.0780, 702.0310, 702.9770, 703.8670, 704.8050, 705.7580, 706.7110, 707.6800,
            708.6480, 709.6170, 710.5550, 711.4920, 712.4140, 713.2580, 714.1090, 714.9530, 715.7190,
            716.5000, 717.2970, 718.1720, 719.0160, 719.8750, 720.7340, 721.6480, 722.5700, 723.5230};
    auto wp = WeightsProducer(1.0);
    return PointProcessDataset::load(events, 8, true, wp,724.330);
}


static testData getTestData(){

    Eigen::VectorXd testOptimalThetap(8);
    testOptimalThetap << 0.77065862,-0.10878393,0.10638951,-0.1348185,-0.42222736,0.05602624,0.47759602,-0.30823957;
    double testOptimalKappa = 1649.7224;
    double testOptimalTheta0 = 0.52325103;
    std::vector<double> testEvents = {
            657.9380,658.8750,659.7580,660.6640,661.6170,662.5780,663.5550,664.5310,665.5000,
            666.4300,667.3520,668.2890,669.2030,670.1330,671.1090,672.1250,673.0940,674.0700,
            675.0470,675.9610,676.8980,677.8980,678.8910,679.8360,680.7890,681.7580,682.6560,
            683.5700,684.5080,685.4140,686.3280,687.2660,688.1880,689.1250,690.0620,690.9610,
            691.8280,692.7110,693.6090,694.4920,695.4220,696.3830,697.2890,698.2110,699.1800,
            700.1410,701.0780,702.0310,702.9770,703.8670,704.8050,705.7580,706.7110,707.6800,
            708.6480,709.6170,710.5550,711.4920,712.4140,713.2580,714.1090,714.9530,715.7190,
            716.5000,717.2970,718.1720,719.0160,719.8750,720.7340,721.6480,722.5700,723.5230,
            724.5310,725.5310,726.4840,727.3910,728.2970,729.1880,730.0620,730.9840,731.9300,
            732.8750,733.8280,734.7810,735.7110,736.6560,737.6090,738.5700,739.4770,740.4140,
            741.3590,742.2660,743.2270,744.1950,745.1170,746.0780,747.0550,748.0000,748.9530,
            749.9220,750.8520,751.7270,752.5860,753.4840,754.3590,755.2660,756.2420,757.2030,
            758.1800,759.1410,760.0780,760.9690,761.8830,762.8280,763.7270,764.6560,765.6250,
            766.5940,767.5160,768.4690,769.4450,770.3520,771.2730,772.2110,773.1170,774.0080,
            774.9530,775.8980,776.7970,777.7270,778.6880,779.6330,780.6090,781.6020,782.5620,
            783.4610,784.3750,785.2890,786.1640,787.0620,788.0390,789.0160,789.9610,790.9300,
            791.9060,792.8440,793.7500,794.6880,795.6720,796.6170,797.6170,798.6480,799.6330,
            800.5230,801.4220,802.3590,803.2810,804.2190,805.1480,806.0780,806.9530,807.8830,
            808.8670,809.8280,810.8120,811.7890,812.7030,813.5620,814.4300,815.3120,816.1800,
            817.0620,817.9920,818.9450,819.8590,820.8050,821.7660,822.6720,823.5700,824.5000,
            825.4300,826.3200,827.2500,828.1880,829.0860,830.0310,830.9920,831.9450,832.8360,
            833.7420,834.6480,835.5230,836.4140,837.3440,838.2580,839.1410,840.0620,841.0080,
            841.9060,842.8360,843.7890,844.7030,845.5700,846.4450,847.3200,848.1330,848.9770,
            849.8830,850.8440,851.8050,852.8440,853.8910,854.8910,855.8440,856.8050,857.7340,
            858.6250,859.5310,860.4690,861.3670,862.3050,863.2580,864.1950,865.0940,866.0160,
            866.9380,867.8120,868.6880,869.5860,870.4920,871.3830,872.3360,873.3360,874.3050,
            875.2420,876.1800,877.0780,877.9380,878.8360,879.7890,880.6880,881.6330,882.6170,
            883.5780,884.4920,885.4380,886.3910,887.2890,888.2030,889.1250,890.0390,890.9300,
            891.8670,892.8590,893.7890,894.7420,895.6880,896.5860,897.4690,898.3980,899.3590,
            900.2500,901.1720,902.1330,903.0940,904.0310,905.0000,905.9690,906.8910,907.7970,
            908.6950,909.5700,910.4140,911.3200,912.3050,913.2890,914.2810,915.2810,916.2340,
            917.0940,917.9530,918.8280,919.7190,920.5780,921.5000,922.4530,923.3830,924.2970,
            925.2270,926.1330,927.0080,927.9060,928.8440,929.7270,930.6480,931.5940,932.5550,
            933.4770,934.4300,935.3910,936.2890,937.2030,938.1170,938.9690,939.7810,940.6090,
            941.4530,942.2580,943.0550,943.8670,944.6560,945.3590,946.0780,946.7730,947.4690,
            948.1560,948.8520,949.5390,950.2110,950.8750,951.5390,952.2110,952.8750,953.5470,
            954.2340,954.9380,955.6330,956.3200,957.0230,957.7340,958.4690,959.1880,959.9380,
            960.7340,961.6090,962.4530,963.3280,964.1950,965.0390,965.8440,966.6800,967.5310,
            968.4300,969.4060,970.3830,971.3120,972.2110,973.1410,974.0700,974.9220,975.7890,
            976.6880,977.5780,978.4450,979.3670,980.2730,981.1020,981.9300,982.7730,983.6020,
            984.4140,985.2730,986.1640,987.0550,987.9690,988.9060,989.8280,990.7270,991.6250,
            992.5000,993.3520,994.2190,995.0780,995.9060,996.7580,997.6560,998.5780,999.4840,
            1000.4380,1001.3980,1002.3050,1003.2110,1004.1560,1005.0860,1005.9770,1006.8750,
            1007.7730,1008.7190,1009.6250,1010.5620,1011.5160,1012.3980,1013.3050,1014.2110,
            1015.0780,1015.9770,1016.8830,1017.8050,1018.6950,1019.6090,1020.5230,1021.3590,
            1022.2340,1023.1330,1024.0230,1024.9140,1025.8200,1026.7270,1027.5860,1028.4530,
            1029.3200,1030.1800,1031.0080,1031.8830,1032.7730,1033.6480,1034.5390,1035.4610,
            1036.3750,1037.2500,1038.1480,1039.0780,1039.9770,1040.8830,1041.8050,1042.7270,
            1043.6020,1044.5310,1045.4770,1046.3590,1047.2420,1048.1410,1049.0080,1049.8590,
            1050.7500,1051.6480,1052.5080,1053.3750,1054.2890,1055.1640,1056.0470,1056.9770,
            1057.8670,1058.7190,1059.6170,1060.5390,1061.4220,1062.3280,1063.2340,1064.0860,
            1064.9060,1065.7730,1066.6640,1067.5310,1068.4380,1069.3750,1070.2970,1071.2190,
            1072.1800,1073.1170,1073.9770,1074.8520,1075.7110,1076.5550,1077.4060,1078.3120,
            1079.2270,1080.0860,1081.0160,1081.9690,1082.8590,1083.7500,1084.6250,1085.4380,
            1086.2190,1086.9920,1087.7190,1088.4140,1089.1090,1089.7810,1090.4380,1091.0940,
            1091.7420,1092.3830,1093.0160,1093.6480,1094.3050,1094.9770,1095.7110,1096.4770,
            1097.2660,1098.0310,1098.7420,1099.4610,1100.1800,1100.9220,1101.6410,1102.3590,
            1103.1170,1103.9380,1104.7730,1105.5470,1106.3440,1107.1480,1107.9920,1108.8200,
            1109.6330,1110.4840,1111.3520,1112.2420,1113.0860,1113.9140,1114.7660,1115.6250,
            1116.4220,1117.2500,1118.1090,1119.0000,1119.8670,1120.7810,1121.7270,1122.6720,
            1123.5860,1124.5000,1125.4300,1126.3360,1127.2340,1128.1560,1129.0940,1129.9920,
            1130.9140,1131.8520,1132.7580,1133.6330,1134.5080,1135.3980,1136.2810,1137.1640,
            1138.1090,1139.0860,1139.9840,1140.8750,1141.7190,1142.5310,1143.2890,1144.0620,
            1144.9060,1145.8980,1146.9140,1147.9380,1148.9300,1149.8830,1150.7660,1151.6480,
            1152.5310,1153.3980,1154.2660,1155.1800,1156.0940,1156.9610,1157.8670,1158.8200,
            1159.7660,1160.6800,1161.6170,1162.5390,1163.4220,1164.2730,1165.1480,1166.0700,
            1167.0000,1167.9140,1168.8280,1169.7500,1170.6410,1171.5230,1172.4300,1173.3520,
            1174.2270,1175.1560,1176.1170,1177.0700,1177.9610,1178.8750,1179.8280,1180.7810,
            1181.7030,1182.6480,1183.5860,1184.4840,1185.4450,1186.4770,1187.5000,1188.4690,
            1189.4220,1190.3670,1191.2420,1192.1170,1193.0390,1193.9840,1194.9060,1195.8830,
            1196.8670,1197.8120,1198.7580,1199.6950,1200.5780,1201.4920,1202.4450,1203.4300,
            1204.3670,1205.3200,1206.2810,1207.1880,1208.1090,1209.0780,1210.0390,1210.9770,
            1211.9300,1212.8750,1213.7810,1214.6560,1215.5390,1216.4770,1217.3980,1218.3200,
            1219.2190,1220.0780,1220.8830,1221.7030,1222.5310,1223.3910,1224.2890,1225.2500,
            1226.2110,1227.1090,1228.0160,1228.8520,1229.6170,1230.3520,1231.0620,1231.7730,
            1232.4690,1233.1720,1233.9380,1234.8670,1235.8440,1236.7340,1237.5940,1238.3980,
            1239.1720,1239.9220,1240.6800,1241.4840,1242.3120,1243.1410,1244.0310,1244.9690,
            1245.8980,1246.8360,1247.7730,1248.6800,1249.5470,1250.4220,1251.3050,1252.1720,
            1252.9920,1253.8200,1254.7110,1255.6170,1256.5550,1257.5470,1258.5230,1259.4380,
            1260.3670,1261.3050,1262.1880,1263.0940,1264.0230,1264.9450,1265.8670,1266.7970,
            1267.6800,1268.5780,1269.5000,1270.4380,1271.3200,1272.2270,1273.1560,1274.0620,
            1274.9770,1275.9140,1276.8280,1277.7110,1278.6250,1279.5550,1280.4220,1281.3440,
            1282.2810,1283.1800,1284.1020,1285.0550,1286.0080,1286.9060,1287.8200,1288.7500,
            1289.6250,1290.5160,1291.4380,1292.3590,1293.2500,1294.1640,1295.1090,1296.0470,
            1296.9770,1297.9140,1298.8520,1299.7190,1300.6170,1301.5620,1302.4770,1303.3830,
            1304.3280,1305.2810,1306.1480,1307.0230,1307.8910,1308.7270,1309.5550,1310.4380,
            1311.3910,1312.3360,1313.2730};
        return testData(testOptimalKappa,testOptimalTheta0,testOptimalThetap,testEvents);
}


#endif //POINTPROCESS_TESTDATA_H
